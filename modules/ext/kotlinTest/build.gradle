/*
 * Copyright 2023-2024 wcaokaze
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
   alias libs.plugins.kotlin.multiplatform
   alias libs.plugins.kotlinx.serialization
}

apply from: rootProject.file('gradle/setupModule.gradle')

def generatedSrcDir = new File(buildDir, 'generated/src'.replace('/', File.separator))

kotlin {
   sourceSets {
      commonMain.kotlin.srcDir generatedSrcDir

      commonMain.dependencies {
         implementation project(':modules:ext:kotlin')
      }
   }
}

tasks.register('generateLibPathProp') {
   doFirst {
      def packageName = 'com.wcaokaze.probosqis.ext.kotlintest'
      def packageDir = new File(
          generatedSrcDir, packageName.replace('.', File.separator)
      )

      def file = new File(packageDir, 'BuildEnv.kt')

      if (!packageDir.exists() && !packageDir.mkdirs()) {
         throw new GradleException("can not generate source: $file")
      }

      def properties = new Properties()
      properties.load(rootProject.file('local.properties').newDataInputStream())
      def value = properties.getProperty('rust.targetFile')
      if (value == null) {
         throw new GradleException(
             'No path for native lib is specified. Add rust.targetFile in local.properties '
                 + '(e.g. `/home/wcaokaze/probosqis/target/debug/libapp.so` on Linux)'
         )
      }

      file.write(
          """
             package $packageName
             internal val nativeLibFile = \"$value\"
          """,
          "UTF-8", /* writeBom = */ false
      )
   }
}

tasks.configureEach { task ->
   if (task.name.contains('compileKotlin')) {
      task.dependsOn 'generateLibPathProp'
   }
}
