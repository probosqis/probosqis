/*
 * Copyright 2023-2025 wcaokaze
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
   alias libs.plugins.kotlin.multiplatform
   alias libs.plugins.rust.android
   alias libs.plugins.kotlinx.serialization
   alias libs.plugins.android.application
   alias libs.plugins.compose.jb
   alias libs.plugins.compose.compiler
   alias libs.plugins.roborazzi
}

apply from: rootProject.file('gradle/setupModule.gradle')

android {
   namespace 'com.wcaokaze.probosqis'
   ndkVersion libs.versions.android.ndk.get()

   sourceSets.main {
      manifest.srcFile 'src/androidMain/AndroidManifest.xml'
      kotlin.srcDirs = ['src/androidMain/kotlin']
      res.srcDirs = ['src/androidMain/res']
   }

   defaultConfig {
      applicationId "com.wcaokaze.probosqis"
      versionCode 1
      versionName "0.0.0"

      testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
   }

   buildTypes {
      release {
         minifyEnabled false
         proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
      }
   }
}

kotlin {
   sourceSets {
      androidMain.dependencies {
         implementation libs.androidx.compose.material3.window.size

         implementation project(':panoptiqon')
         implementation project(':panoptiqon-compose')

         implementation project(':capsiqum-page')
         implementation project(':capsiqum-deck')
         implementation project(':capsiqum-transition')
         implementation project(':modules:app:core')
         implementation project(':modules:app:pagedeck')
         implementation project(':modules:foundation:error')
         implementation project(':modules:foundation:page')

         implementation project(':modules:credential')

         implementation project(':modules:testpages')

         implementation project(':modules:nodeinfo:repository')

         implementation project(':modules:mastodon:ui')
         implementation project(':modules:mastodon:entity')
         implementation project(':modules:mastodon:repository')

         implementation project(':modules:foundation:resources')
      }
   }
}

cargo {
   module = '../..'
   libname = 'app_core'
   rustupChannel = 'nightly'
   targets = ['arm', 'arm64', 'x86', 'x86_64']
   features {
      defaultAnd('jvm')
   }
}

tasks.configureEach { task ->
   if (task.name.contains('javaPreCompile')) {
      task.dependsOn 'cargoBuild'
   }
}
