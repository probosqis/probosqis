/*
 * Copyright 2023 wcaokaze
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

boolean hasPlugin(Provider<? extends PluginDependency> plugin) {
   return project.pluginManager.hasPlugin(plugin.get().pluginId)
}

def isAndroidModule = hasPlugin(libs.plugins.android.application)
      || hasPlugin(libs.plugins.android.library)
def isComposeModule = hasPlugin(libs.plugins.compose.jb)
def isExtModule = project.path.contains(':modules:ext')

kotlin {
   if (isAndroidModule) {
      androidTarget()
      jvm('desktop')
   } else if (isComposeModule) {
      jvm('desktop')
   } else {
      jvm()
   }

   compilerOptions {
      freeCompilerArgs = ['-Xexpect-actual-classes']
   }

   jvmToolchain(17)

   applyDefaultHierarchyTemplate()

   sourceSets {
      if (isAndroidModule || isComposeModule) {
         jvmAndroidMain.dependsOn(commonMain)
         jvmAndroidTest.dependsOn(commonTest)
         desktopMain.dependsOn(jvmAndroidMain)
         desktopTest.dependsOn(jvmAndroidTest)
      }

      if (isAndroidModule) {
         androidMain.dependsOn(jvmAndroidMain)
         androidUnitTest.dependsOn(jvmAndroidTest)
      }

      commonMain.dependencies {
         implementation libs.kotlinx.datetime
         implementation libs.kotlinx.serialization
         implementation libs.kotlinx.collections.immutable
         implementation libs.androidx.annotation
         implementation libs.koin.compose
      }

      commonTest.dependencies {
         implementation libs.kotlin.test.junit
      }

      if (isAndroidModule || isComposeModule) {
         jvmAndroidMain.dependencies {
         }

         jvmAndroidTest.dependencies {
            implementation libs.mockk
         }
      } else {
         jvmMain.dependencies {
         }

         jvmTest.dependencies {
            implementation libs.mockk
         }
      }

      if (isAndroidModule) {
         androidMain.dependencies {
         }

         androidUnitTest.dependencies {
            implementation libs.androidx.test.ext
            implementation libs.robolectric
         }
      }

      if (isComposeModule) {
         commonMain.dependencies {
            implementation compose.material3
         }

         commonTest.dependencies {
            implementation compose.uiTestJUnit4
         }

         desktopMain.dependencies {
            implementation compose.uiTooling
            implementation compose.preview
         }

         desktopTest.dependencies {
            implementation compose.desktop.currentOs
         }

         if (isAndroidModule) {
            androidMain.dependencies {
               implementation libs.androidx.activity.compose
               implementation compose.uiTooling
               implementation compose.preview
            }

            androidUnitTest.dependencies {
               implementation libs.compose.ui.test.manifest
            }
         }

         if (hasPlugin(libs.plugins.roborazzi)) {
            commonTest.dependencies {
               implementation libs.roborazzi.core
               implementation libs.roborazzi.compose
            }
         }
      }

      if (!isExtModule) {
         commonMain.dependencies {
            implementation project(':modules:ext:kotlin')
         }

         commonTest.dependencies {
            implementation project(':modules:ext:kotlinTest')
         }

         if (isAndroidModule) {
            commonMain.dependencies {
               implementation project(':modules:ext:android')
            }
         }

         if (isAndroidModule && isComposeModule) {
            commonMain.dependencies {
               implementation project(':modules:ext:compose')
            }
         }
      }
   }
}

if (isAndroidModule) {
   android {
      compileSdk 34

      defaultConfig {
         minSdk 21
         targetSdk 34
      }

      buildFeatures {
         compose true
      }

      compileOptions {
         coreLibraryDesugaringEnabled true
         sourceCompatibility = '1.17'
         targetCompatibility = '1.17'
      }

      composeOptions {
         kotlinCompilerExtensionVersion = libs.versions.compose.compiler.get()
      }

      testOptions {
         unitTests {
            includeAndroidResources = true
         }
      }

      packagingOptions.resources {
         excludes += [
               'META-INF/LICENSE',
               'META-INF/LICENSE.txt',
               'META-INF/LICENSE.md',
               'META-INF/license',
               'META-INF/license.txt',
               'META-INF/license.md',
               'META-INF/LICENSE-notice.md',
         ]
      }
   }

   dependencies {
      coreLibraryDesugaring libs.android.desugaring.jdk
   }
}

if (isComposeModule) {
   compose {
      kotlinCompilerPlugin.set("androidx.compose.compiler:compiler:${libs.versions.compose.compiler.get()}")
   }
}
